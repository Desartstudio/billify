<?php
// auto-generated by sfPropelCrud
// date: 11/20/2005 19:10:32
?>
<?php
include_once('propel/util/Criteria.php');
/**
 * cliente actions.
 *
 * @package    ##PROJECT_NAME##
 * @subpackage cliente
 * @author     Your name here
 * @version    SVN: $Id$
 */
class clienteActions extends sfActions
{ 
  public function executeIndex() {
    return $this->forward('cliente', 'list');
  }

  public function executeList () {

    if($this->getRequestParameter('string_search')) {
      $this->executeSearch();
    }
    else {
      $criteria = new Criteria;
      $criteria->add(ClientePeer::STATO, Cliente::ATTIVO);
      $criteria->add(ClientePeer::CLASS_KEY, ContattoPeer::CLASSKEY_CLIENTE);
      $criteria->addAscendingOrderByColumn(ClientePeer::RAGIONE_SOCIALE );
      $criteria->addAscendingOrderByColumn(ClientePeer::COGNOME);

      $pager = new sfPropelPager('Cliente', UtentePeer::getImpostazione()->getNumClienti());
      $pager->setCriteria($criteria);
      $pager->setPage($this->getRequestParameter('page', 1));
      $pager->init();
      $this->pager = $pager;
    }
  }
  
  public function executeSearch()
  {
    if($this->getRequestParameter('string_search')!=""){
      $this->string_search = $this->getRequestParameter('string_search');
      $criteria = new Criteria();
      $criteria->add(ClientePeer::CLASS_KEY, ContattoPeer::CLASSKEY_CLIENTE);
      $criteria->addAscendingOrderByColumn(ClientePeer::RAGIONE_SOCIALE );
      $criteria->addAscendingOrderByColumn(ClientePeer::COGNOME);
      $cr1 = $criteria->getNewCriterion(ClientePeer::RAGIONE_SOCIALE , '%'.$this->string_search.'%', Criteria::LIKE );
      $cr2 = $criteria->getNewCriterion(ClientePeer::NOME , '%'.$this->string_search.'%', Criteria::LIKE );
      $cr3 = $criteria->getNewCriterion(ClientePeer::COGNOME , '%'.$this->string_search.'%', Criteria::LIKE );
      $cr2->addOr($cr3);
      $cr1->addOr($cr2);
      $criteria->add($cr1);
      $criteria->add(ClientePeer::STATO, Cliente::ATTIVO);

      $pager = new sfPropelPager('Cliente', UtentePeer::getImpostazione()->getNumClienti());
      $pager->setCriteria($criteria);
      $pager->setPage($this->getRequestParameter('page', 1));
      $pager->init();
      $this->pager = $pager;

    	return sfView::SUCCESS;
    }else{
      $this->string_search = null;
      $this->executeList();
    }
  }

  /**
   * Enter description here...
   *
   */
  public function executeShow ()
  {
  	$this->executeAnagrafica();
  }
  
  public function executeAnagrafica()
  {
  	//Customer
  	$criteria = new Criteria();
  	$criteria->add(ClientePeer::STATO, Cliente::ATTIVO);
  	$criteria->add(ClientePeer::ID,$this->getRequestParameter('id'));
  	$this->cliente = ClientePeer::doSelectOne($criteria);
    //$this->cliente = ClientePeer::retrieveByPk($this->getRequestParameter('id'));
    
    $this->forward404Unless($this->cliente instanceof Cliente);
  }
  
  public function executeOpzioni()
  {
  	$this->executeAnagrafica();
  }
	
  public function executeCreate(){
  	$this->cliente = new Cliente();
  	$this->setTemplate('edit');
  }
  
  public function executeEdit ()
  {
    $this->forward404Unless($this->hasRequestParameter('id'));
    $this->cliente = ClientePeer::retrieveByPK($this->getRequestParameter('id'));
    $this->forward404Unless($this->cliente);
    
  }

  public function executeUpdate ()
  {
    $cliente = $this->getClienteOrCreate();

    $cliente->setId($this->getRequestParameter('id'));
    
    if(UtentePeer::getImpostazione()->getBoolCodiceCliente())
    	$cliente->setCod(stripcslashes($this->getRequestParameter('cod')));
    	
    $cliente->setAzienda(stripcslashes($this->getRequestParameter('azienda')));
    $cliente->setRagioneSociale(stripcslashes($this->getRequestParameter('ragione_sociale')));
    $cliente->setVia(stripcslashes($this->getRequestParameter('via')));
    $cliente->setCitta(stripcslashes($this->getRequestParameter('citta')));
    $cliente->setProvincia(stripcslashes($this->getRequestParameter('provincia')));
    $cliente->setCap(stripcslashes($this->getRequestParameter('cap')));
    $cliente->setPiva(stripcslashes($this->getRequestParameter('piva')));
    $cliente->setCf(stripcslashes($this->getRequestParameter('cf')));
    $cliente->setCognome(stripcslashes($this->getRequestParameter('cognome')));
    $cliente->setNome(stripcslashes($this->getRequestParameter('nome')));
    $cliente->setTelefono(stripcslashes($this->getRequestParameter('telefono')));
    $cliente->setFax(stripcslashes($this->getRequestParameter('fax')));
    $cliente->setCellulare(stripcslashes($this->getRequestParameter('cellulare')));
    $cliente->setEmail(stripcslashes($this->getRequestParameter('email')));
    $cliente->setModoPagamentoId(stripcslashes($this->getRequestParameter('modo_pagamento_id')));
    $cliente->setStato(stripcslashes($this->getRequestParameter('stato','a')));
    
    if($this->getRequestParameter('id_tema_fattura'))
    	$cliente->setIdTemaFattura(stripcslashes($this->getRequestParameter('id_tema_fattura')));
    	
    if($this->getRequestParameter('id_banca'))
    	$cliente->setIdBanca(stripcslashes($this->getRequestParameter('id_banca')));
    	
    $cliente->setIncludiTasse(stripcslashes($this->getRequestParameter('includi_tasse','n')));
    $cliente->setCalcolaRitenutaAcconto(stripcslashes($this->getRequestParameter('calcola_ritenuta','a')));
    $cliente->setCalcolaTasse(stripcslashes($this->getRequestParameter('calcola_tasse','s')));
    $cliente->setIdUtente($this->getUser()->getAttribute('id_utente'));

    $cliente->save();

    return $this->redirect('cliente/show?id='.$cliente->getID());
  }

  public function executeDelete ()
  {
    $cliente = ClientePeer::retrieveByPk($this->getRequestParameter('id'));

    $this->forward404Unless($cliente instanceof Cliente);
	
    $cliente->delete();

    return $this->redirect('cliente/list');
  }

  private function getClienteOrCreate ($id = 'id')
  {
    if (!$this->getRequestParameter($id, 0))
    {
      $cliente = new Cliente();
    }
    else
    {
      $cliente = ClientePeer::retrieveByPk($this->getRequestParameter($id));

      $this->forward404Unless($cliente instanceof Cliente);
    }

    return $cliente;
  }
  
  public function executeDisattiva()
  {
  	if($this->hasRequestParameter('id'))
  	{
  		$cliente = ClientePeer::retrieveByPK($this->getRequestParameter('id'));
  		$cliente->setStato('n');
  		$cliente->save();
  		
  		$this->redirect('cliente/list');
  	}
  }
  
  public function executeAttiva()
  {
  	if($this->getRequestParameter('id'))
  	{
  		$cliente = $this->getClienteOrCreate($this->getRequestParameter('id'));
  		$cliente->setStato('a');
  		$cliente->save();
  		
  		$this->redirect('cliente/list');
  	}
  }
  
  public function handleError()
  {
  	if($this->getRequestParameter('id',0)){
  		$this->forward('cliente','edit');
  	}else{
  		$this->forward('cliente','create');
  	}
  	
  }

  public function validateUpdate()
  {
    // validate request parameters
    if($this->getRequestParameter('ragione_sociale') == "" && ($this->getRequestParameter('nome') == "" && $this->getRequestParameter('cognome') == "")){
    	$this->getRequest()->setError('ragione_sociale', 'La ragione sociale o il nome o il cognome devono essere compilati');
      	return false;
    }
    return true;
  }
}

?>
